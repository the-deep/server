schema {
  query: Query
  mutation: Mutation
}

type AdminLevelType {
  id: ID!
  title: String!
  level: Int
  nameProp: String!
  codeProp: String!
  parentNameProp: String!
  parentCodeProp: String!
  geoShapeFile: GalleryFileType
  tolerance: Float!
  staleGeoAreas: Boolean!
  parent: ID
  geojsonFile: FileFieldType
  boundsFile: FileFieldType
}

type AnalysisFrameworkDetailType {
  id: ID!
  title: String!
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdBy: UserType
  modifiedBy: UserType
  description: String
  isPrivate: Boolean!
  organization: OrganizationType
  properties: GenericScalar
  currentUserRole: AnalysisFrameworkRoleTypeEnum
  previewImage: FileFieldType
  allowedPermissions: [AnalysisFrameworkPermission!]!
  primaryTagging: [SectionType!]
  secondaryTagging: [WidgetType!]
  members: [AnalysisFrameworkMembershipType!]
  filters: [AnalysisFrameworkFilterType!]
  exportables: [AnalysisFrameworkExportableType!]
  visibleProjects: [AnalysisFrameworkVisibleProjectType!]
}

type AnalysisFrameworkExportableType {
  id: ID!
  inline: Boolean!
  order: Int!
  data: GenericScalar
  widgetKey: String!
  widgetType: WidgetWidgetTypeEnum!
  widgetTypeDisplay: EnumDescription!
}

type AnalysisFrameworkFilterType {
  id: ID!
  title: String!
  properties: GenericScalar
  key: String!
  widgetType: WidgetWidgetTypeEnum!
  widgetTypeDisplay: EnumDescription!
  filterType: WidgetFilterTypeEnum!
  filterTypeDisplay: EnumDescription!
}

input AnalysisFrameworkInputType {
  title: String!
  description: String
  isPrivate: Boolean
  properties: GenericScalar
  organization: ID
  previewImage: Upload
  primaryTagging: [SectionGqlInputType!]
  secondaryTagging: [WidgetGqlInputType!]
}

type AnalysisFrameworkListType {
  results: [AnalysisFrameworkType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type AnalysisFrameworkMembershipType {
  id: ID!
  member: UserType!
  role: AnalysisFrameworkRoleType!
  joinedAt: DateTime!
  addedBy: UserType
  clientId: String!
}

type AnalysisFrameworkMutationType {
  id: ID!
  title: String!
  analysisFrameworkUpdate(data: AnalysisFrameworkInputType!): UpdateAnalysisFramework
  analysisFrameworkMembershipBulk(deleteIds: [ID!], items: [BulkAnalysisFrameworkMembershipInputType!]): BulkUpdateAnalysisFrameworkMembership
}

enum AnalysisFrameworkPermission {
  CAN_ADD_USER
  CAN_CLONE_FRAMEWORK
  CAN_EDIT_FRAMEWORK
  CAN_USE_IN_OTHER_PROJECTS
  DELETE_FRAMEWORK
}

type AnalysisFrameworkRoleType {
  id: ID!
  title: String!
}

enum AnalysisFrameworkRoleTypeEnum {
  EDITOR
  OWNER
  DEFAULT
  PRIVATE_EDITOR
  PRIVATE_OWNER
  PRIVATE_VIEWER
  UNKNOWN
}

type AnalysisFrameworkType {
  id: ID!
  title: String!
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdBy: UserType
  modifiedBy: UserType
  description: String
  isPrivate: Boolean!
  organization: OrganizationType
  currentUserRole: AnalysisFrameworkRoleTypeEnum
  previewImage: FileFieldType
  allowedPermissions: [AnalysisFrameworkPermission!]!
}

type AnalysisFrameworkVisibleProjectType {
  id: ID!
  title: String!
  isPrivate: Boolean!
}

type AnalysisListType {
  results: [AnalysisType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type AnalysisPillarDetailType {
  id: ID!
  title: String!
  mainStatement: String!
  informationGap: String!
  filters: GenericScalar
  assignee: UserType!
  clientId: String!
  analysis: ID!
  clonedFrom: ID!
  entries(id: ID, excerpt: String, controlled: Boolean, createdAt: DateTime, createdAtGte: DateTime, createdAtLte: DateTime, modifiedAt: DateTime, modifiedAtGte: DateTime, modifiedAtLte: DateTime, createdBy: [ID!], modifiedBy: [ID!], leads: [ID!], leadPublishedOn: Date, leadPublishedOnGte: Date, leadPublishedOnLte: Date, leadTitle: String, leadAssignees: [ID!], leadStatuses: [LeadStatusEnum!], leadPriorities: [LeadPriorityEnum!], leadConfidentialities: [LeadConfidentialityEnum!], leadAuthoringOrganizationTypes: [ID!], leadAuthorOrganizations: [ID!], leadSourceOrganizations: [ID!], search: String, commentStatus: EntryFilterCommentStatusEnum, entryTypes: [EntryTagTypeEnum!], projectEntryLabels: [ID!], entriesId: [ID!], geoCustomShape: String, leadGroupLabel: String, filterableData: [EntryFilterDataType!], discarded: Boolean, excludeEntries: [ID!], page: Int = 1, ordering: String, pageSize: Int): AnalysisPillarEntryListType
}

type AnalysisPillarEntryListType {
  results: [EntryType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type AnalysisPillarListType {
  results: [AnalysisPillarType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type AnalysisPillarType {
  id: ID!
  title: String!
  mainStatement: String!
  informationGap: String!
  filters: GenericScalar
  assignee: UserType!
  clientId: String!
  analysis: ID!
  clonedFrom: ID!
}

type AnalysisType {
  id: ID!
  title: String!
  startDate: Date
  endDate: Date!
  clientId: String!
  teamLead: ID!
  clonedFrom: ID!
}

type AssessmentListType {
  results: [AssessmentType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type AssessmentType {
  id: ID!
  lead: LeadType
  project: ProjectType!
  leadGroup: LeadGroupType
  metadata: GenericScalar
  methodology: GenericScalar
  summary: GenericScalar
  score: GenericScalar
  questionnaire: GenericScalar
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdBy: UserType
  modifiedBy: UserType
}

input AttributeGqInputType {
  id: ID
  data: GenericScalar
  widget: ID!
  widgetVersion: Int!
  clientId: String
}

type AttributeType {
  id: ID!
  widgetVersion: Int!
  data: GenericScalar
  clientId: String!
  widget: ID!
  widgetType: WidgetWidgetTypeEnum!
  widgetTypeDisplay: EnumDescription!
  geoSelectedOptions: [ProjectGeoAreaType!]
}

input BulkAnalysisFrameworkMembershipInputType {
  id: ID
  member: ID!
  role: ID
  clientId: String
}

type BulkEntry {
  errors: [[GenericScalar!]]
  result: [EntryType]
  deletedResult: [EntryType!]
}

input BulkEntryInputType {
  id: ID
  lead: ID!
  order: Int
  informationDate: Date
  entryType: EntryTagTypeEnum
  image: ID
  imageRaw: String
  leadImage: ID
  tabularField: ID
  excerpt: String
  droppedExcerpt: String
  highlightHidden: Boolean
  attributes: [AttributeGqInputType!]
  clientId: String
}

type BulkLead {
  errors: [[GenericScalar!]]
  result: [LeadType]
  deletedResult: [LeadType!]
}

input BulkLeadInputType {
  id: ID
  title: String!
  attachment: ID
  status: LeadStatusEnum
  assignee: String
  confidentiality: LeadConfidentialityEnum
  sourceType: LeadSourceTypeEnum
  priority: LeadPriorityEnum
  publishedOn: Date
  text: String
  isAssessmentLead: Boolean
  leadGroup: ID
  url: String
  website: String
  source: ID
  authors: [ID!]
  emmTriggers: [LeadEMMTriggerInputType!]
  emmEntities: [EMMEntityInputType!]
  clientId: String
}

input BulkProjectMembershipInputType {
  id: ID
  member: ID!
  role: ID
  badges: [ProjectMembershipBadgeTypeEnum!]
  clientId: String
}

input BulkProjectUserGroupMembershipInputType {
  usergroup: ID!
  role: ID
  badges: [ProjectMembershipBadgeTypeEnum!]
  clientId: String
  id: ID
}

type BulkUpdateAnalysisFrameworkMembership {
  errors: [[GenericScalar!]]
  result: [AnalysisFrameworkMembershipType]
  deletedResult: [AnalysisFrameworkMembershipType!]
}

type BulkUpdateProjectMembership {
  errors: [[GenericScalar!]]
  result: [ProjectMembershipType]
  deletedResult: [ProjectMembershipType!]
}

type BulkUpdateProjectUserGroupMembership {
  errors: [[GenericScalar!]]
  result: [ProjectUserGroupMembershipType]
  deletedResult: [ProjectUserGroupMembershipType!]
}

type CancelUserExport {
  errors: [GenericScalar!]
  ok: Boolean
  result: UserExportType
}

type ChangeUserPassword {
  errors: [GenericScalar!]
  ok: Boolean
}

type CreateAnalysisFramework {
  errors: [GenericScalar!]
  ok: Boolean
  result: AnalysisFrameworkDetailType
}

type CreateEntry {
  errors: [GenericScalar!]
  ok: Boolean
  result: EntryType
}

type CreateEntryReviewComment {
  errors: [GenericScalar!]
  ok: Boolean
  result: EntryReviewCommentDetailType
}

type CreateLead {
  errors: [GenericScalar!]
  ok: Boolean
  result: LeadType
}

type CreateProjectJoin {
  errors: [GenericScalar!]
  ok: Boolean
  result: ProjectJoinRequestType
}

type CreateUserExport {
  errors: [GenericScalar!]
  ok: Boolean
  result: UserExportType
}

type CreateUserGroup {
  errors: [GenericScalar!]
  ok: Boolean
  result: UserGroupType
}

scalar Date

type DateCountType {
  date: String
  count: Int
}

scalar DateTime

type DeleteAssessment {
  errors: [GenericScalar!]
  ok: Boolean
  result: AssessmentType
}

type DeleteEntry {
  errors: [GenericScalar!]
  ok: Boolean
  result: EntryType
}

type DeleteEntryReviewComment {
  errors: [GenericScalar!]
  ok: Boolean
  result: EntryReviewCommentDetailType
}

type DeleteLead {
  errors: [GenericScalar!]
  ok: Boolean
  result: LeadType
}

type DeleteLeadGroup {
  errors: [GenericScalar!]
  ok: Boolean
  result: LeadGroupType
}

type DeleteUserExport {
  errors: [GenericScalar!]
  ok: Boolean
  result: UserExportType
}

type DeleteUserGroup {
  errors: [GenericScalar!]
  ok: Boolean
  result: UserGroupType
}

type DjangoDebug {
  sql: [DjangoDebugSQL]
}

type DjangoDebugSQL {
  vendor: String!
  alias: String!
  sql: String
  duration: Float!
  rawSql: String!
  params: String!
  startTime: Float!
  stopTime: Float!
  isSlow: Boolean!
  isSelect: Boolean!
  transId: String
  transStatus: String
  isoLevel: String
  encoding: String
}

input EMMEntityInputType {
  name: String!
}

type EmmEntityListType {
  results: [EmmEntityType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type EmmEntityType {
  id: ID!
  name: String!
}

type EmmKeyRiskFactorType {
  emmRiskFactors: String
}

type EmmKeyWordType {
  emmKeywords: String
}

type EntriesCountType {
  total: Int
  controlled: Int
}

enum EntryFilterCommentStatusEnum {
  RESOLVED
  UNRESOLVED
}

input EntryFilterDataType {
  filterKey: ID!
  value: String
  valueGte: String
  valueLte: String
  valueList: [String!]
  useExclude: Boolean
  useAndOperator: Boolean
  includeSubRegions: Boolean
}

type EntryGroupLabelType {
  labelId: ID!
  labelTitle: String!
  labelColor: String
  count: Int!
  groups: [String!]!
}

input EntryInputType {
  id: ID
  lead: ID!
  order: Int
  informationDate: Date
  entryType: EntryTagTypeEnum
  image: ID
  imageRaw: String
  leadImage: ID
  tabularField: ID
  excerpt: String
  droppedExcerpt: String
  highlightHidden: Boolean
  attributes: [AttributeGqInputType!]
  clientId: String
}

type EntryListType {
  results: [EntryType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type EntryReviewCommentDetailType {
  id: ID!
  createdBy: UserType!
  createdAt: DateTime!
  mentionedUsers: [UserType!]!
  entry: ID!
  commentType: EntryReviewCommentTypeEnum!
  commentTypeDisplay: EnumDescription!
  text: String
  textHistory: [EntryReviewCommentTextType!]
}

input EntryReviewCommentInputType {
  entry: ID!
  commentType: EntryReviewCommentTypeEnum
  text: String
  mentionedUsers: [ID!]
}

type EntryReviewCommentTextType {
  id: ID!
  createdAt: DateTime!
  text: String!
}

type EntryReviewCommentType {
  id: ID!
  createdBy: UserType!
  createdAt: DateTime!
  mentionedUsers: [UserType!]!
  commentType: EntryReviewCommentTypeEnum!
  commentTypeDisplay: EnumDescription!
  text: String
  entry: ID!
}

enum EntryReviewCommentTypeEnum {
  COMMENT
  VERIFY
  UNVERIFY
  CONTROL
  UNCONTROL
}

enum EntryTagTypeEnum {
  EXCERPT
  IMAGE
  DATA_SERIES
}

type EntryType {
  id: ID!
  clientId: String!
  lead: LeadType!
  project: ProjectType!
  order: Int!
  analysisFramework: AnalysisFrameworkType!
  informationDate: Date
  excerpt: String!
  image: GalleryFileType
  droppedExcerpt: String!
  highlightHidden: Boolean!
  controlled: Boolean
  controlledChangedBy: UserType
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdBy: UserType
  modifiedBy: UserType
  entryType: EntryTagTypeEnum!
  entryTypeDisplay: EnumDescription!
  attributes: [AttributeType!]
  projectLabels: [EntryGroupLabelType!]
  verifiedBy: [UserType!]
  verifiedByCount: Int!
  reviewComments: [EntryReviewCommentType!]
  reviewCommentsCount: Int!
}

scalar EnumDescription

type ExploreProjectStatTopActiveFrameworksType {
  analysisFrameworkId: ID!
  analysisFrameworkTitle: String
  projectCount: Int!
  sourceCount: Int!
}

type ExploreProjectStatTopActiveProjectsType {
  projectId: ID!
  projectTitle: String
  analysisFrameworkId: ID
  analysisFrameworkTitle: String
}

input ExportCreateInputType {
  title: String
  type: ExportDataTypeEnum!
  format: ExportFormatEnum!
  exportType: ExportExportTypeEnum!
  isPreview: Boolean
  filters: ExportLeadsEntriesFilterData!
  excelDecoupled: Boolean
  reportShowGroups: Boolean
  reportShowLeadEntryId: Boolean
  reportShowAssessmentData: Boolean
  reportShowEntryWidgetData: Boolean
  reportTextWidgetIds: [Int!]
  reportExportingWidgets: [Int!]
  reportLevels: [ExportReportLevelWidgetInputType!]
  reportStructure: [ExportReportStructureWidgetInputType!]
}

enum ExportDataTypeEnum {
  ENTRIES
  ASSESSMENTS
  PLANNED_ASSESSMENTS
}

enum ExportExportTypeEnum {
  EXCEL
  REPORT
  JSON
}

enum ExportFormatEnum {
  XLSX
  DOCX
  PDF
  JSON
}

input ExportLeadsEntriesFilterData {
  text: String
  url: String
  website: String
  createdAt: DateTime
  createdAtGte: DateTime
  createdAtLte: DateTime
  modifiedAt: DateTime
  modifiedAtGte: DateTime
  modifiedAtLte: DateTime
  createdBy: [ID!]
  modifiedBy: [ID!]
  ids: [ID!]
  excludeProvidedLeadsId: Boolean
  sourceTypes: [LeadSourceTypeEnum!]
  priorities: [LeadPriorityEnum!]
  confidentiality: LeadConfidentialityEnum
  statuses: [LeadStatusEnum!]
  extractionStatus: LeadExtractionStatusEnum
  assignees: [ID!]
  authoringOrganizationTypes: [ID!]
  authorOrganizations: [ID!]
  sourceOrganizations: [ID!]
  exists: LeadExistsEnum
  customFilters: LeadCustomFilterEnum
  entriesFilterData: LeadEntriesFilterData
  search: String
  publishedOn: Date
  publishedOnGte: Date
  publishedOnLte: Date
  emmEntities: String
  emmKeywords: String
  emmRiskFactors: String
  ordering: [LeadOrderingEnum!]
}

input ExportReportLevelWidgetInputType {
  id: ID!
  levels: [ExportReportLevelWidgetLevelInputType!]
}

input ExportReportLevelWidgetLevelInputType {
  id: ID!
  title: String!
  sublevels: [ExportReportLevelWidgetSubLevelInputType!]
}

input ExportReportLevelWidgetSubLevelInputType {
  id: ID!
  title: String!
  sublevels: [ExportReportLevelWidgetSubSubLevelInputType!]
}

input ExportReportLevelWidgetSubSubLevelInputType {
  id: ID!
  title: String!
}

input ExportReportStructureWidgetFirstLevelInputType {
  id: ID!
  levels: [ExportReportStructureWidgetSecondLevelInputType!]
}

input ExportReportStructureWidgetInputType {
  id: ID!
  levels: [ExportReportStructureWidgetFirstLevelInputType!]
}

input ExportReportStructureWidgetSecondLevelInputType {
  id: ID!
  levels: [ExportReportStructureWidgetThirdLevelInputType!]
}

input ExportReportStructureWidgetThirdLevelInputType {
  id: ID!
}

enum ExportStatusEnum {
  PENDING
  STARTED
  SUCCESS
  FAILURE
  CANCELED
}

enum FeatureFeatureType {
  GENERAL_ACCESS
  EXPERIMENTAL
  EARLY_ACCESS
}

enum FeatureKey {
  PRIVATE_PROJECT
  TABULAR
  ZOOMABLE_IMAGE
  POLYGON_SUPPORT_GEO
  ENTRY_VISUALIZATION_CONFIGURATION
  QUALITY_CONTROL
  NEW_UI
  ANALYSIS
  QUESTIONNAIRE
}

type FileFieldType {
  name: String
  url: String
}

type GalleryFileType {
  id: ID!
  title: String!
  mimeType: String
  metadata: GenericScalar
  file: FileFieldType
}

scalar GenericScalar

input GroupMembershipGqInputType {
  id: Int
  member: ID!
  role: GroupMembershipRoleEnum
}

enum GroupMembershipRoleEnum {
  NORMAL
  ADMIN
}

type GroupMembershipType {
  id: ID!
  member: UserType!
  joinedAt: DateTime!
  addedBy: UserType
  role: GroupMembershipRoleEnum!
  roleDisplay: EnumDescription!
}

input HIDLoginInputType {
  accessToken: String!
  expiresIn: Int
  tokenType: String
  state: Int
}

type JwtTokenType {
  accessToken: String
  expiresIn: String
}

enum LeadConfidentialityEnum {
  UNPROTECTED
  CONFIDENTIAL
}

type LeadCopy {
  errors: [GenericScalar!]
  ok: Boolean
  result: [LeadType!]
}

input LeadCopyInputType {
  projects: [ID!]!
  leads: [ID!]!
}

enum LeadCustomFilterEnum {
  EXCLUDE_EMPTY_FILTERED_ENTRIES
  EXCLUDE_EMPTY_CONTROLLED_FILTERED_ENTRIES
}

type LeadDetailType {
  id: ID!
  clientId: String!
  leadGroup: LeadGroupType
  title: String!
  assignee: UserType
  publishedOn: Date
  text: String!
  url: String!
  website: String!
  attachment: GalleryFileType
  isAssessmentLead: Boolean!
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdBy: UserType
  modifiedBy: UserType
  project: ID!
  sourceType: LeadSourceTypeEnum!
  sourceTypeDisplay: EnumDescription!
  priority: LeadPriorityEnum!
  priorityDisplay: EnumDescription!
  confidentiality: LeadConfidentialityEnum!
  confidentialityDisplay: EnumDescription!
  status: LeadStatusEnum!
  statusDisplay: EnumDescription!
  extractionStatus: LeadExtractionStatusEnum
  leadPreview: LeadPreviewType
  source: OrganizationType
  authors: [OrganizationType!]
  entriesCounts: EntriesCountType
  emmEntities: [EmmEntityType!]
  emmTriggers: [LeadEmmTriggerType!]
  assessmentId: ID
  entries: [EntryType!]
}

input LeadEMMTriggerInputType {
  emmRiskFactor: String
  emmKeyword: String!
  count: Int
}

type LeadEmmTriggerListType {
  results: [LeadEmmTriggerType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type LeadEmmTriggerType {
  id: ID!
  emmKeyword: String!
  emmRiskFactor: String!
  count: Int!
}

input LeadEntriesFilterData {
  id: ID
  excerpt: String
  controlled: Boolean
  createdAt: DateTime
  createdAtGte: DateTime
  createdAtLte: DateTime
  modifiedAt: DateTime
  modifiedAtGte: DateTime
  modifiedAtLte: DateTime
  createdBy: [ID!]
  modifiedBy: [ID!]
  leads: [ID!]
  leadPublishedOn: Date
  leadPublishedOnGte: Date
  leadPublishedOnLte: Date
  leadTitle: String
  leadAssignees: [ID!]
  leadStatuses: [LeadStatusEnum!]
  leadPriorities: [LeadPriorityEnum!]
  leadConfidentialities: [LeadConfidentialityEnum!]
  leadAuthoringOrganizationTypes: [ID!]
  leadAuthorOrganizations: [ID!]
  leadSourceOrganizations: [ID!]
  search: String
  commentStatus: EntryFilterCommentStatusEnum
  entryTypes: [EntryTagTypeEnum!]
  projectEntryLabels: [ID!]
  entriesId: [ID!]
  geoCustomShape: String
  leadGroupLabel: String
  filterableData: [EntryFilterDataType!]
}

enum LeadExistsEnum {
  ENTRIES_EXISTS
  ASSESSMENT_EXISTS
  ENTRIES_DO_NOT_EXIST
  ASSESSMENT_DOES_NOT_EXIST
}

enum LeadExtractionStatusEnum {
  PENDING
  STARTED
  RETRYING
  SUCCESS
  FAILED
}

type LeadGroupListType {
  results: [LeadGroupType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type LeadGroupType {
  id: ID!
  title: String!
  project: ProjectType!
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdBy: UserType
  modifiedBy: UserType
  leadCounts: Int!
}

input LeadInputType {
  id: ID
  title: String!
  attachment: ID
  status: LeadStatusEnum
  assignee: String
  confidentiality: LeadConfidentialityEnum
  sourceType: LeadSourceTypeEnum
  priority: LeadPriorityEnum
  publishedOn: Date
  text: String
  isAssessmentLead: Boolean
  leadGroup: ID
  url: String
  website: String
  source: ID
  authors: [ID!]
  emmTriggers: [LeadEMMTriggerInputType!]
  emmEntities: [EMMEntityInputType!]
  clientId: String
}

type LeadListType {
  results: [LeadType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

enum LeadOrderingEnum {
  ASC_ID
  ASC_CREATED_AT
  ASC_TITLE
  ASC_SOURCE
  ASC_PUBLISHED_ON
  ASC_CREATED_BY
  ASC_ASSIGNEE
  ASC_PRIORITY
  ASC_PAGE_COUNT
  DESC_ID
  DESC_CREATED_AT
  DESC_TITLE
  DESC_SOURCE
  DESC_PUBLISHED_ON
  DESC_CREATED_BY
  DESC_ASSIGNEE
  DESC_PRIORITY
  DESC_PAGE_COUNT
}

type LeadPreviewType {
  textExtract: String!
  thumbnail: String
  thumbnailHeight: Int
  thumbnailWidth: Int
  wordCount: Int
  pageCount: Int
}

enum LeadPriorityEnum {
  HIGH
  MEDIUM
  LOW
}

enum LeadSourceTypeEnum {
  TEXT
  DISK
  WEBSITE
  DROPBOX
  GOOGLE_DRIVE
  RSS
  EMM
  WEB_API
  UNKNOWN
}

enum LeadStatusEnum {
  NOT_TAGGED
  IN_PROGRESS
  TAGGED
}

type LeadType {
  id: ID!
  clientId: String!
  leadGroup: LeadGroupType
  title: String!
  assignee: UserType
  publishedOn: Date
  text: String!
  url: String!
  website: String!
  attachment: GalleryFileType
  isAssessmentLead: Boolean!
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdBy: UserType
  modifiedBy: UserType
  project: ID!
  sourceType: LeadSourceTypeEnum!
  sourceTypeDisplay: EnumDescription!
  priority: LeadPriorityEnum!
  priorityDisplay: EnumDescription!
  confidentiality: LeadConfidentialityEnum!
  confidentialityDisplay: EnumDescription!
  status: LeadStatusEnum!
  statusDisplay: EnumDescription!
  extractionStatus: LeadExtractionStatusEnum
  leadPreview: LeadPreviewType
  source: OrganizationType
  authors: [OrganizationType!]
  entriesCounts: EntriesCountType
  emmEntities: [EmmEntityType!]
  emmTriggers: [LeadEmmTriggerType!]
  assessmentId: ID
}

type Login {
  result: UserMeType
  errors: [GenericScalar!]
  ok: Boolean!
  captchaRequired: Boolean!
}

input LoginInputType {
  email: String!
  password: String!
  captcha: String
}

type LoginWithHID {
  result: UserMeType
  errors: [GenericScalar!]
  ok: Boolean!
}

type Logout {
  ok: Boolean
}

type MergedAsOrganizationType {
  id: ID!
  title: String!
  logo: GalleryFileType
}

type Mutation {
  notificationStatusUpdate(data: NotificationStatusInputType!): NotificationStatusUpdate
  joinProject(data: ProjectJoinRequestInputType!): CreateProjectJoin
  projectJoinRequestDelete(projectId: ID!): ProjectJoinRequestDelete
  project(id: ID!): ProjectMutationType
  userGroupCreate(data: UserGroupInputType!): CreateUserGroup
  userGroupUpdate(data: UserGroupInputType!, id: ID!): UpdateUserGroup
  userGroupDelete(id: ID!): DeleteUserGroup
  login(data: LoginInputType!): Login
  loginWithHid(data: HIDLoginInputType!): LoginWithHID
  logout: Logout
  register(data: RegisterInputType!): Register
  resetPassword(data: ResetPasswordInputType!): ResetPassword
  changePassword(data: PasswordChangeInputType!): ChangeUserPassword
  updateMe(data: UserMeInputType!): UpdateMe
  analysisFrameworkCreate(data: AnalysisFrameworkInputType!): CreateAnalysisFramework
  analysisFramework(id: ID!): AnalysisFrameworkMutationType
}

type NotificationListType {
  results: [NotificationType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

enum NotificationStatusEnum {
  SEEN
  UNSEEN
}

input NotificationStatusInputType {
  id: ID!
  status: NotificationStatusEnum
}

type NotificationStatusUpdate {
  errors: [GenericScalar!]
  ok: Boolean
  result: NotificationType
}

type NotificationType {
  id: ID!
  project: ProjectType
  data: GenericScalar
  timestamp: DateTime!
  notificationType: NotificationTypeEnum!
  notificationTypeDisplay: EnumDescription!
  status: NotificationStatusEnum!
  statusDisplay: EnumDescription!
}

enum NotificationTypeEnum {
  PROJECT_JOIN_REQUEST
  PROJECT_JOIN_REQUEST_ABORT
  PROJECT_JOIN_RESPONSE
  ENTRY_COMMENT_ADD
  ENTRY_COMMENT_MODIFY
  ENTRY_COMMENT_ASSIGNEE_CHANGE
  ENTRY_COMMENT_REPLY_ADD
  ENTRY_COMMENT_REPLY_MODIFY
  ENTRY_COMMENT_RESOLVED
  ENTRY_REVIEW_COMMENT_ADD
  ENTRY_REVIEW_COMMENT_MODIFY
}

type OrganizationListType {
  results: [OrganizationType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type OrganizationType {
  id: ID!
  title: String!
  logo: GalleryFileType
  shortName: String!
  longName: String!
  url: String!
  regions: [RegionWithProject!]!
  organizationType: OrganizationTypeType
  verified: Boolean!
  mergedAs: MergedAsOrganizationType
}

type OrganizationTypeListType {
  results: [OrganizationTypeType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type OrganizationTypeType {
  id: ID!
  title: String!
  shortName: String
  description: String!
}

input PasswordChangeInputType {
  oldPassword: String!
  newPassword: String!
}

scalar PointScalar

type ProjectAcceptReject {
  errors: [GenericScalar!]
  ok: Boolean
  result: ProjectJoinRequestType
}

input ProjectAcceptRejectInputType {
  status: ProjectJoinRequestStatusEnum
  role: String
}

type ProjectByRegionListType {
  results: [RegionWithProject!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type ProjectDetailType {
  id: ID!
  createdAt: DateTime!
  title: String!
  description: String!
  modifiedAt: DateTime!
  createdBy: UserType
  modifiedBy: UserType
  startDate: Date
  endDate: Date
  analysisFramework: AnalysisFrameworkDetailType
  isDefault: Boolean!
  isPrivate: Boolean!
  isVisualizationEnabled: Boolean!
  data: GenericScalar
  currentUserRole: ProjectRoleTypeEnum
  allowedPermissions: [ProjectPermission!]!
  stats: ProjectStatType
  membershipPending: Boolean!
  isRejected: Boolean!
  regions: [RegionDetailType!]
  status: ProjectStatusEnum!
  statusDisplay: EnumDescription!
  organizations: [ProjectOrganizationType!]
  hasAnalysisFramework: Boolean!
  hasAssessmentTemplate: Boolean!
  analysis(id: ID!): AnalysisType
  analyses(createdAt: DateTime, createdAtGte: DateTime, createdAtLte: DateTime, modifiedAt: DateTime, modifiedAtGte: DateTime, modifiedAtLte: DateTime, createdBy: [ID!], modifiedBy: [ID!], page: Int = 1, ordering: String, pageSize: Int): AnalysisListType
  analysisPillar(id: ID!): AnalysisPillarDetailType
  analysisPillars(createdAt: DateTime, createdAtGte: DateTime, createdAtLte: DateTime, modifiedAt: DateTime, modifiedAtGte: DateTime, modifiedAtLte: DateTime, createdBy: [ID!], modifiedBy: [ID!], analyses: [ID!], page: Int = 1, ordering: String, pageSize: Int): AnalysisPillarListType
  assessment(id: ID!): AssessmentType
  assessments(createdAt: DateTime, createdAtGte: DateTime, createdAtLte: DateTime, modifiedAt: DateTime, modifiedAtGte: DateTime, modifiedAtLte: DateTime, createdBy: [ID!], modifiedBy: [ID!], search: String, page: Int = 1, ordering: String, pageSize: Int): AssessmentListType
  reviewComment(id: ID!): EntryReviewCommentDetailType
  geoAreas(ids: [ID!], search: String, page: Int = 1, ordering: String, pageSize: Int): ProjectGeoAreaListType
  export(id: ID!): UserExportType
  exports(type: [ExportDataTypeEnum!], format: [ExportFormatEnum!], status: [ExportStatusEnum!], search: String, exportedAt: DateTime, exportedAtGte: DateTime, exportedAtLte: DateTime, page: Int = 1, ordering: String, pageSize: Int): UserExportListType
  entry(id: ID!): EntryType
  entries(id: ID, excerpt: String, controlled: Boolean, createdAt: DateTime, createdAtGte: DateTime, createdAtLte: DateTime, modifiedAt: DateTime, modifiedAtGte: DateTime, modifiedAtLte: DateTime, createdBy: [ID!], modifiedBy: [ID!], leads: [ID!], leadPublishedOn: Date, leadPublishedOnGte: Date, leadPublishedOnLte: Date, leadTitle: String, leadAssignees: [ID!], leadStatuses: [LeadStatusEnum!], leadPriorities: [LeadPriorityEnum!], leadConfidentialities: [LeadConfidentialityEnum!], leadAuthoringOrganizationTypes: [ID!], leadAuthorOrganizations: [ID!], leadSourceOrganizations: [ID!], search: String, commentStatus: EntryFilterCommentStatusEnum, entryTypes: [EntryTagTypeEnum!], projectEntryLabels: [ID!], entriesId: [ID!], geoCustomShape: String, leadGroupLabel: String, filterableData: [EntryFilterDataType!], page: Int = 1, ordering: String, pageSize: Int): EntryListType
  lead(id: ID!): LeadDetailType
  leads(text: String, url: String, website: String, createdAt: DateTime, createdAtGte: DateTime, createdAtLte: DateTime, modifiedAt: DateTime, modifiedAtGte: DateTime, modifiedAtLte: DateTime, createdBy: [ID!], modifiedBy: [ID!], ids: [ID!], excludeProvidedLeadsId: Boolean, sourceTypes: [LeadSourceTypeEnum!], priorities: [LeadPriorityEnum!], confidentiality: LeadConfidentialityEnum, statuses: [LeadStatusEnum!], extractionStatus: LeadExtractionStatusEnum, assignees: [ID!], authoringOrganizationTypes: [ID!], authorOrganizations: [ID!], sourceOrganizations: [ID!], exists: LeadExistsEnum, customFilters: LeadCustomFilterEnum, entriesFilterData: LeadEntriesFilterData, search: String, publishedOn: Date, publishedOnGte: Date, publishedOnLte: Date, emmEntities: String, emmKeywords: String, emmRiskFactors: String, ordering: [LeadOrderingEnum!], page: Int = 1, pageSize: Int): LeadListType
  leadGroup(id: ID!): LeadGroupType
  leadGroups(createdAt: DateTime, createdAtGte: DateTime, createdAtLte: DateTime, modifiedAt: DateTime, modifiedAtGte: DateTime, modifiedAtLte: DateTime, createdBy: [ID!], modifiedBy: [ID!], search: String, page: Int = 1, ordering: String, pageSize: Int): LeadGroupListType
  emmEntities(name: String, page: Int = 1, ordering: String, pageSize: Int): EmmEntityListType
  leadEmmTriggers(lead: ID, emmKeyword: String, emmRiskFactor: String, count: Int, page: Int = 1, ordering: String, pageSize: Int): LeadEmmTriggerListType
  emmKeywords: [EmmKeyWordType!]
  emmRiskFactors: [EmmKeyRiskFactorType!]
  activityLog: GenericScalar
  recentActiveUsers: [UserEntityDateType!]
  topSourcers: [UserEntityCountType!]
  topTaggers: [UserEntityCountType!]
  userMembers(id: Float, createdAt: DateTime, createdAtGte: DateTime, createdAtLte: DateTime, modifiedAt: DateTime, modifiedAtGte: DateTime, modifiedAtLte: DateTime, createdBy: [ID!], modifiedBy: [ID!], search: String, members: [ID!], page: Int = 1, ordering: String, pageSize: Int): ProjectMembershipListType
  userGroupMembers(id: Float, createdAt: DateTime, createdAtGte: DateTime, createdAtLte: DateTime, modifiedAt: DateTime, modifiedAtGte: DateTime, modifiedAtLte: DateTime, createdBy: [ID!], modifiedBy: [ID!], search: String, usergroups: [ID!], page: Int = 1, ordering: String, pageSize: Int): ProjectUserGroupMembershipListType
  isVisualizationAvailable: Boolean!
  vizData: ProjectVizDataType
  unifiedConnector: UnifiedConnectorQueryType
}

type ProjectExploreStatType {
  calculatedAt: DateTime
  totalProjects: Int
  totalUsers: Int
  leadsAddedWeekly: Int
  dailyAverageLeadsTaggedPerProject: Float
  generatedExportsMonthly: Int
  topActiveProjects: [ExploreProjectStatTopActiveProjectsType!]
  topActiveFrameworks: [ExploreProjectStatTopActiveFrameworksType!]
}

type ProjectGeoAreaListType {
  results: [ProjectGeoAreaType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type ProjectGeoAreaType {
  id: ID!
  title: String!
  regionTitle: String!
  adminLevelTitle: String!
}

type ProjectJoinRequestDelete {
  errors: [GenericScalar!]
  ok: Boolean
  result: ProjectJoinRequestType
}

input ProjectJoinRequestInputType {
  reason: String!
  role: String
  project: String!
  data: GenericScalar
}

enum ProjectJoinRequestStatusEnum {
  PENDING
  ACCEPTED
  REJECTED
}

type ProjectJoinRequestType {
  id: ID!
  project: ProjectType!
  requestedBy: UserType!
  respondedBy: UserType
  data: GenericScalar
  status: ProjectJoinRequestStatusEnum!
}

type ProjectListType {
  results: [ProjectType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

enum ProjectMembershipBadgeTypeEnum {
  QA
}

type ProjectMembershipListType {
  results: [ProjectMembershipType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type ProjectMembershipType {
  id: ID!
  member: UserType!
  role: ProjectRoleType!
  linkedGroup: UserGroupType
  joinedAt: DateTime!
  addedBy: UserType
  clientId: String!
  badges: [ProjectMembershipBadgeTypeEnum!]
}

type ProjectMutationType {
  id: ID!
  title: String!
  exportCreate(data: ExportCreateInputType!): CreateUserExport
  exportCancel(id: ID!): CancelUserExport
  exportDelete(id: ID!): DeleteUserExport
  assessmentDelete(id: ID!): DeleteAssessment
  entryReviewCommentCreate(data: EntryReviewCommentInputType!): CreateEntryReviewComment
  entryReviewCommentUpdate(data: EntryReviewCommentInputType!, id: ID!): UpdateEntryReviewComment
  entryReviewCommentDelete(id: ID!): DeleteEntryReviewComment
  entryCreate(data: EntryInputType!): CreateEntry
  entryUpdate(data: EntryInputType!, id: ID!): UpdateEntry
  entryDelete(id: ID!): DeleteEntry
  entryBulk(deleteIds: [ID!], items: [BulkEntryInputType!]): BulkEntry
  leadCreate(data: LeadInputType!): CreateLead
  leadUpdate(data: LeadInputType!, id: ID!): UpdateLead
  leadDelete(id: ID!): DeleteLead
  leadBulk(items: [BulkLeadInputType!]): BulkLead
  leadGroupDelete(id: ID!): DeleteLeadGroup
  leadCopy(data: LeadCopyInputType!): LeadCopy
  acceptRejectProject(data: ProjectAcceptRejectInputType!, id: ID!): ProjectAcceptReject
  projectUserMembershipBulk(deleteIds: [ID!], items: [BulkProjectMembershipInputType!]): BulkUpdateProjectMembership
  projectUserGroupMembershipBulk(deleteIds: [ID!], items: [BulkProjectUserGroupMembershipInputType!]): BulkUpdateProjectUserGroupMembership
  projectVizConfigurationUpdate(data: ProjectVizConfigurationInputType!): UpdateProjectVizConfiguration
}

type ProjectOrganizationType {
  id: ID!
  organization: OrganizationType!
  organizationType: ProjectOrganizationTypeEnum!
  organizationTypeDisplay: EnumDescription!
}

enum ProjectOrganizationTypeEnum {
  LEAD_ORGANIZATION
  INTERNATIONAL_PARTNER
  NATIONAL_PARTNER
  DONOR
  GOVERNMENT
}

enum ProjectPermission {
  BASE_ACCESS
  UPDATE_PROJECT
  DELETE_PROJECT
  CAN_ADD_MEMBER
  CREATE_LEAD
  VIEW_ONLY_UNPROTECTED_LEAD
  VIEW_ALL_LEAD
  UPDATE_LEAD
  DELETE_LEAD
  CREATE_ENTRY
  VIEW_ENTRY
  UPDATE_ENTRY
  DELETE_ENTRY
  CREATE_EXPORT
  CAN_QUALITY_CONTROL
}

type ProjectRoleType {
  id: ID!
  title: String!
  level: Int!
}

enum ProjectRoleTypeEnum {
  PROJECT_OWNER
  ADMIN
  MEMBER
  READER
  READER_NON_CONFIDENTIAL
  UNKNOWN
}

type ProjectStatType {
  numberOfLeads: Int
  numberOfLeadsNotTagged: Int
  numberOfLeadsInProgress: Int
  numberOfLeadsTagged: Int
  numberOfEntries: Int
  numberOfEntriesVerified: Int
  numberOfEntriesControlled: Int
  numberOfUsers: Int
  leadsActivity: [DateCountType!]
  entriesActivity: [DateCountType!]
}

enum ProjectStatsActionEnum {
  NEW
  ON
  OFF
}

enum ProjectStatsStatus {
  PENDING
  STARTED
  SUCCESS
  FAILURE
}

enum ProjectStatusEnum {
  ACTIVE
  INACTIVE
}

type ProjectType {
  id: ID!
  createdAt: DateTime!
  title: String!
  description: String!
  modifiedAt: DateTime!
  createdBy: UserType
  modifiedBy: UserType
  startDate: Date
  endDate: Date
  analysisFramework: AnalysisFrameworkType
  isDefault: Boolean!
  isPrivate: Boolean!
  isVisualizationEnabled: Boolean!
  currentUserRole: ProjectRoleTypeEnum
  allowedPermissions: [ProjectPermission!]!
  stats: ProjectStatType
  membershipPending: Boolean!
  isRejected: Boolean!
  regions: [RegionDetailType!]
  status: ProjectStatusEnum!
  statusDisplay: EnumDescription!
  organizations: [ProjectOrganizationType!]
  hasAnalysisFramework: Boolean!
  hasAssessmentTemplate: Boolean!
}

type ProjectUserGroupMembershipListType {
  results: [ProjectUserGroupMembershipType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type ProjectUserGroupMembershipType {
  id: ID!
  usergroup: UserGroupType!
  role: ProjectRoleType!
  joinedAt: DateTime!
  addedBy: UserType
  clientId: String!
  badges: [ProjectMembershipBadgeTypeEnum!]
}

input ProjectVizConfigurationInputType {
  action: ProjectStatsActionEnum!
}

type ProjectVizDataType {
  modifiedAt: DateTime!
  status: ProjectStatsStatus!
  publicShare: Boolean!
  dataUrl: String
  publicUrl: String
}

type PublicAnalysisFramework {
  id: ID!
  title: String!
}

type PublicAnalysisFrameworkListType {
  results: [PublicAnalysisFramework!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type PublicOrganization {
  id: ID!
  title: String!
}

type PublicOrganizationListObjectType {
  results: [PublicOrganization!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type PublicProjectByRegionListType {
  results: [RegionWithProject!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type PublicProjectListType {
  results: [PublicProjectType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type PublicProjectType {
  id: ID!
  createdAt: DateTime!
  title: String!
  description: String!
  analysisFramework: ID
  analysisFrameworkTitle: String
  regionsTitle: String
  organizationsTitle: String
  numberOfUsers: Int!
  numberOfLeads: Int!
  numberOfEntries: Int!
  analysisFrameworkPreviewImage: String
}

type Query {
  notification(id: ID!): NotificationType
  notifications(timestamp: DateTime, timestampLte: DateTime, timestampGte: DateTime, isPending: Boolean, notificationType: NotificationTypeEnum, status: NotificationStatusEnum, page: Int = 1, ordering: String, pageSize: Int): NotificationListType
  region(id: ID!): RegionDetailType
  regions(id: Float, code: String, title: String, public: Boolean, project: [ID], createdAt: DateTime, createdBy: [ID], modifiedAt: DateTime, modifiedBy: [ID], createdAt_Lt: Date, createdAt_Gte: Date, modifiedAt_Lt: Date, modifiedAt_Gt: Date, excludeProject: [ID], page: Int = 1, ordering: String, pageSize: Int): RegionListType
  organization(id: ID!): OrganizationType
  organizations(id: Float, search: String, page: Int = 1, ordering: String, pageSize: Int): OrganizationListType
  publicOrganizations(id: Float, search: String, page: Int = 1, ordering: String, pageSize: Int): PublicOrganizationListObjectType
  organizationType(id: ID!): OrganizationTypeType
  organizationTypes(title: String, shortName: String, description: String, reliefWebId: Int, page: Int = 1, ordering: String, pageSize: Int): OrganizationTypeListType
  userGroup(id: ID!): UserGroupType
  userGroups(id: Float, isCurrentUserMember: Boolean, page: Int = 1, ordering: String, pageSize: Int): UserGroupListType
  me: UserMeType
  user(id: ID!): UserType
  users(id: Float, search: String, membersExcludeProject: ID, membersExcludeFramework: ID, membersExcludeUsergroup: ID, page: Int = 1, ordering: String, pageSize: Int): UserListType
  analysisFramework(id: ID!): AnalysisFrameworkDetailType
  analysisFrameworks(id: Float, createdAt: DateTime, createdAtGte: DateTime, createdAtLte: DateTime, modifiedAt: DateTime, modifiedAtGte: DateTime, modifiedAtLte: DateTime, createdBy: [ID!], modifiedBy: [ID!], search: String, isCurrentUserMember: Boolean, page: Int = 1, ordering: String, pageSize: Int): AnalysisFrameworkListType
  publicAnalysisFrameworks(id: Float, createdAt: DateTime, createdAtGte: DateTime, createdAtLte: DateTime, modifiedAt: DateTime, modifiedAtGte: DateTime, modifiedAtLte: DateTime, createdBy: [ID!], modifiedBy: [ID!], search: String, isCurrentUserMember: Boolean, page: Int = 1, ordering: String, pageSize: Int): PublicAnalysisFrameworkListType
  project(id: ID!): ProjectDetailType
  projects(createdAt: DateTime, createdAtGte: DateTime, createdAtLte: DateTime, modifiedAt: DateTime, modifiedAtGte: DateTime, modifiedAtLte: DateTime, createdBy: [ID!], modifiedBy: [ID!], ids: [ID!], excludeIds: [ID!], status: ProjectStatusEnum, organizations: [ID!], analysisFrameworks: [ID!], regions: [ID!], search: String, isCurrentUserMember: Boolean, hasPermissionAccess: ProjectPermission, page: Int = 1, ordering: String, pageSize: Int): ProjectListType
  recentProjects: [ProjectDetailType!]
  projectExploreStats: ProjectExploreStatType
  projectsByRegion(projectFilter: RegionProjectFilterData, ordering: String): ProjectByRegionListType
  publicProjects(createdAt: DateTime, createdAtGte: DateTime, createdAtLte: DateTime, modifiedAt: DateTime, modifiedAtGte: DateTime, modifiedAtLte: DateTime, createdBy: [ID!], modifiedBy: [ID!], ids: [ID!], excludeIds: [ID!], status: ProjectStatusEnum, organizations: [ID!], analysisFrameworks: [ID!], regions: [ID!], search: String, isCurrentUserMember: Boolean, hasPermissionAccess: ProjectPermission, page: Int = 1, ordering: String, pageSize: Int): PublicProjectListType
  publicProjectsByRegion(projectFilter: RegionProjectFilterData, page: Int = 1, ordering: String, pageSize: Int): PublicProjectByRegionListType
  _debug: DjangoDebug
}

type RegionDetailType {
  id: ID!
  title: String!
  public: Boolean!
  isPublished: Boolean!
  regionalGroups: GenericScalar
  keyFigures: GenericScalar
  populationData: GenericScalar
  mediaSources: GenericScalar
  centroid: PointScalar
  adminLevels: [AdminLevelType!]
}

type RegionListType {
  results: [RegionType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

input RegionProjectFilterData {
  createdAt: DateTime
  createdAtGte: DateTime
  createdAtLte: DateTime
  modifiedAt: DateTime
  modifiedAtGte: DateTime
  modifiedAtLte: DateTime
  createdBy: [ID!]
  modifiedBy: [ID!]
  ids: [ID!]
  excludeIds: [ID!]
  status: ProjectStatusEnum
  organizations: [ID!]
  analysisFrameworks: [ID!]
  regions: [ID!]
  search: String
  isCurrentUserMember: Boolean
  hasPermissionAccess: ProjectPermission
}

type RegionType {
  id: ID!
  title: String!
  public: Boolean!
  isPublished: Boolean!
  regionalGroups: GenericScalar
  keyFigures: GenericScalar
  populationData: GenericScalar
  mediaSources: GenericScalar
  centroid: PointScalar
}

type RegionWithProject {
  id: ID!
  centroid: PointScalar
  projectsId: [ID!]
}

type Register {
  errors: [GenericScalar!]
  ok: Boolean!
  captchaRequired: Boolean!
}

input RegisterInputType {
  email: String!
  firstName: String
  lastName: String
  organization: String!
  captcha: String!
}

type ResetPassword {
  errors: [GenericScalar!]
  ok: Boolean!
  captchaRequired: Boolean!
}

input ResetPasswordInputType {
  email: String!
  captcha: String!
}

input SectionGqlInputType {
  id: ID
  title: String!
  order: Int
  tooltip: String
  widgets: [WidgetGqlInputType!]
  clientId: String
}

type SectionType {
  id: ID!
  title: String!
  order: Int!
  tooltip: String
  clientId: String!
  widgets: [WidgetType!]
}

type UnifiedConnectorListType {
  results: [UnifiedConnectorType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

enum UnifiedConnectorOrderingEnum {
  ASC_ID
  ASC_CREATED_AT
  ASC_TITLE
  DESC_ID
  DESC_CREATED_AT
  DESC_TITLE
}

type UnifiedConnectorQueryType {
  unifiedConnector(id: ID!): UnifiedConnectorType
  unifiedConnectors(ordering: [UnifiedConnectorOrderingEnum!], page: Int = 1, pageSize: Int): UnifiedConnectorListType
}

type UnifiedConnectorType {
  id: ID!
  title: String!
  isActive: Boolean!
  project: ID!
}

type UpdateAnalysisFramework {
  errors: [GenericScalar!]
  ok: Boolean
  result: AnalysisFrameworkDetailType
}

type UpdateEntry {
  errors: [GenericScalar!]
  ok: Boolean
  result: EntryType
}

type UpdateEntryReviewComment {
  errors: [GenericScalar!]
  ok: Boolean
  result: EntryReviewCommentDetailType
}

type UpdateLead {
  errors: [GenericScalar!]
  ok: Boolean
  result: LeadType
}

type UpdateMe {
  errors: [GenericScalar!]
  ok: Boolean
  result: UserMeType
}

type UpdateProjectVizConfiguration {
  errors: [GenericScalar!]
  ok: Boolean
  result: ProjectVizDataType
}

type UpdateUserGroup {
  errors: [GenericScalar!]
  ok: Boolean
  result: UserGroupType
}

scalar Upload

enum UserEmailConditionOptOutEnum {
  JOIN_REQUESTS
  NEWS_AND_UPDATES
  EMAIL_COMMENT
}

type UserEntityCountType {
  id: String
  name: String
  userId: String
  count: Int
}

type UserEntityDateType {
  id: String!
  name: String
  date: DateTime!
}

type UserExportListType {
  results: [UserExportType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type UserExportType {
  id: ID!
  project: ID
  isPreview: Boolean!
  title: String!
  exportedBy: UserType!
  exportedAt: DateTime!
  filters: GenericScalar!
  extraOptions: GenericScalar!
  mimeType: String!
  pending: Boolean!
  isArchived: Boolean!
  format: ExportFormatEnum!
  type: ExportDataTypeEnum!
  status: ExportStatusEnum!
  exportType: ExportExportTypeEnum!
  file: FileFieldType
}

type UserFeatureAccessType {
  key: FeatureKey!
  title: String!
  featureType: FeatureFeatureType!
}

input UserGroupInputType {
  title: String
  description: String
  displayPicture: ID
  globalCrisisMonitoring: Boolean
  customProjectFields: GenericScalar
  memberships: [GroupMembershipGqInputType!]
}

type UserGroupListType {
  results: [UserGroupType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type UserGroupType {
  id: ID!
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdBy: UserType
  modifiedBy: UserType
  clientId: String
  title: String!
  description: String!
  globalCrisisMonitoring: Boolean!
  customProjectFields: GenericScalar
  currentUserRole: GroupMembershipRoleEnum
  currentUserRoleDisplay: EnumDescription
  memberships: [GroupMembershipType!]
}

type UserListType {
  results: [UserType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

input UserMeInputType {
  firstName: String
  lastName: String
  organization: String
  displayPicture: ID
  language: String
  emailOptOuts: [UserEmailConditionOptOutEnum!]
  lastActiveProject: ID
}

type UserMeType {
  id: ID!
  firstName: String!
  lastName: String!
  isActive: Boolean!
  lastLogin: DateTime
  email: String
  displayName: String
  displayPicture: ID
  displayPictureUrl: String
  organization: String
  language: String
  emailOptOuts: [UserEmailConditionOptOutEnum!]
  jwtToken: JwtTokenType
  lastActiveProject: ProjectDetailType
  accessibleFeatures: [UserFeatureAccessType!]!
}

type UserType {
  id: ID!
  firstName: String!
  lastName: String!
  isActive: Boolean!
  displayName: String
  displayPictureUrl: String
  organization: String
  language: String
}

input WidgetConditionalGqlInputType {
  parentWidget: ID!
  conditions: GenericScalar!
}

type WidgetConditionalType {
  parentWidget: ID!
  parentWidgetType: WidgetWidgetTypeEnum!
  conditions: GenericScalar
}

enum WidgetFilterTypeEnum {
  TEXT
  NUMBER
  LIST
  INTERSECTS
}

input WidgetGqlInputType {
  id: ID
  key: String!
  widgetId: WidgetWidgetTypeEnum!
  title: String!
  order: Int
  width: WidgetWidthTypeEnum
  version: Int!
  properties: GenericScalar
  conditional: WidgetConditionalGqlInputType
  clientId: String
}

type WidgetType {
  id: ID!
  title: String!
  properties: GenericScalar
  order: Int!
  version: Int!
  clientId: String!
  widgetId: WidgetWidgetTypeEnum!
  widgetIdDisplay: EnumDescription!
  width: WidgetWidthTypeEnum!
  widthDisplay: EnumDescription!
  key: String!
  conditional: WidgetConditionalType
}

enum WidgetWidgetTypeEnum {
  DATE
  DATE_RANGE
  TIME
  TIME_RANGE
  NUMBER
  SCALE
  GEO
  SELECT
  MULTISELECT
  ORGANIGRAM
  MATRIX1D
  MATRIX2D
  NUMBER_MATRIX
  CONDITIONAL
  TEXT
  EXCERPT
}

enum WidgetWidthTypeEnum {
  FULL
  HALF
}
