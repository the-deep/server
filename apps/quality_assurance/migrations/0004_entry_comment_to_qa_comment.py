
# Generated by Django 3.2.5 on 2021-11-25 04:23

from django.db import migrations
from django.db.models import Min

MIGRATED_FROM_MESSAGE = '\n<Migrated from old entry comment>'


def copy_entry_comment_to_qa_entry_comment(apps, schema_editor):
    EntryComment = apps.get_model('entry', 'EntryComment')
    EntryReviewComment = apps.get_model('quality_assurance', 'EntryReviewComment')
    EntryReviewCommentText = apps.get_model('quality_assurance', 'EntryReviewCommentText')
    entry_comment_qs = EntryComment.objects.annotate(
        created_at=Min('entrycommenttext__created_at')
    ).prefetch_related('assignees').distinct()

    comment_created = 0
    comment_text_created = 0
    for entry_comment in entry_comment_qs.iterator(chunk_size=10000):
        comment_created += 1
        review_comment = EntryReviewComment.objects.create(
            created_by_id=entry_comment.created_by_id,
            entry_id=entry_comment.entry_id,
            entry_comment=entry_comment,
            comment_type=0,  # COMMENT = 0
        )
        # Django overrides this on create
        review_comment.created_at = entry_comment.created_at
        review_comment.save(update_fields=('created_at',))
        review_comment.mentioned_users.set(entry_comment.assignees.all())
        for comment_text in entry_comment.entrycommenttext_set.all():
            comment_text_created += 1
            review_comment_text = EntryReviewCommentText.objects.create(
                text=comment_text.text,
                comment_id=review_comment.pk,
            )
            # Django overrides this on create
            review_comment_text.created_at = comment_text.created_at
            review_comment_text.save(update_fields=('created_at',))
    print(f'\n\t{comment_created=}, {comment_text_created=}')


def remove_qa_entry_comment_migrated_from_entry_comment(apps, schema_editor):
    EntryReviewComment = apps.get_model('quality_assurance', 'EntryReviewComment')
    queryset = EntryReviewComment.objects\
        .filter(
            entry_comment__isnull=False,
            comment_type=0,  # COMMENT = 0
        )
    print('\n\tDeleting:', queryset.delete())


class Migration(migrations.Migration):

    dependencies = [
        ('quality_assurance', '0003_entryreviewcomment_entry_comment'),
    ]

    operations = [
        migrations.RunPython(
            copy_entry_comment_to_qa_entry_comment,
            reverse_code=remove_qa_entry_comment_migrated_from_entry_comment,
        ),
    ]

